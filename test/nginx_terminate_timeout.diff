diff --git a/src/core/nginx.c b/src/core/nginx.c
index c75ee4f..2b8f959 100644
--- a/src/core/nginx.c
+++ b/src/core/nginx.c
@@ -125,6 +125,13 @@ static ngx_command_t  ngx_core_commands[] = {
       offsetof(ngx_core_conf_t, rlimit_sigpending),
       NULL },
 
+    { ngx_string("child_terminate_timeout"),
+      NGX_MAIN_CONF|NGX_DIRECT_CONF|NGX_CONF_TAKE1,
+      ngx_conf_set_msec_slot,
+      0,
+      offsetof(ngx_core_conf_t, child_terminate_timeout),
+      NULL },
+
     { ngx_string("working_directory"),
       NGX_MAIN_CONF|NGX_DIRECT_CONF|NGX_CONF_TAKE1,
       ngx_conf_set_str_slot,
@@ -955,6 +962,7 @@ ngx_core_module_create_conf(ngx_cycle_t *cycle)
     ccf->rlimit_nofile = NGX_CONF_UNSET;
     ccf->rlimit_core = NGX_CONF_UNSET;
     ccf->rlimit_sigpending = NGX_CONF_UNSET;
+    ccf->child_terminate_timeout = NGX_CONF_UNSET_MSEC;
 
     ccf->user = (ngx_uid_t) NGX_CONF_UNSET_UINT;
     ccf->group = (ngx_gid_t) NGX_CONF_UNSET_UINT;
@@ -985,6 +993,7 @@ ngx_core_module_init_conf(ngx_cycle_t *cycle, void *conf)
 
     ngx_conf_init_value(ccf->worker_processes, 1);
     ngx_conf_init_value(ccf->debug_points, 0);
+    ngx_conf_init_value(ccf->child_terminate_timeout, 1000);
 
 #if (NGX_HAVE_CPU_AFFINITY)
 
diff --git a/src/core/ngx_cycle.h b/src/core/ngx_cycle.h
index 21bf5ca..cd983ff 100644
--- a/src/core/ngx_cycle.h
+++ b/src/core/ngx_cycle.h
@@ -85,6 +85,7 @@ typedef struct {
      ngx_int_t                rlimit_sigpending;
      off_t                    rlimit_core;
 
+     ngx_msec_t               child_terminate_timeout;
      int                      priority;
 
      ngx_uint_t               cpu_affinity_n;
diff --git a/src/os/unix/ngx_process_cycle.c b/src/os/unix/ngx_process_cycle.c
index 51cf725..7d2f4c2 100644
--- a/src/os/unix/ngx_process_cycle.c
+++ b/src/os/unix/ngx_process_cycle.c
@@ -200,7 +200,7 @@ ngx_master_process_cycle(ngx_cycle_t *cycle)
 
             sigio = ccf->worker_processes + 2 /* cache processes */;
 
-            if (delay > 1000) {
+            if (delay > ccf->child_terminate_timeout) {
                 ngx_signal_worker_processes(cycle, SIGKILL);
             } else {
                 ngx_signal_worker_processes(cycle,
